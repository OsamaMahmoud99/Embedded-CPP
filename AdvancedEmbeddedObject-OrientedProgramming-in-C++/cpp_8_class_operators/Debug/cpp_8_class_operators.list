
cpp_8_class_operators.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000274  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000438  08000440  00001440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000438  08000438  00001440  2**0
                  CONTENTS
  4 .ARM          00000000  08000438  08000438  00001440  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000438  08000440  00001440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000438  08000438  00001438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800043c  0800043c  0000143c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000440  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000440  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001440  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000069b  00000000  00000000  00001470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000038a  00000000  00000000  00001b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00001e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005e  00000000  00000000  00001f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c30  00000000  00000000  00001f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000ba3  00000000  00000000  0001abb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b53b  00000000  00000000  0001b759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a6c94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000015c  00000000  00000000  000a6cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009a  00000000  00000000  000a6e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000420 	.word	0x08000420

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000420 	.word	0x08000420

08000204 <_ZN4GPIOC1EP12GPIO_TypeDefhb>:


#include "GPIO.hpp"

//Constructor
GPIO::GPIO(GPIO_TypeDef *gpioport, uint8_t gpiopin, bool isOutput): port(gpioport), pin(gpiopin){
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	4611      	mov	r1, r2
 8000210:	461a      	mov	r2, r3
 8000212:	460b      	mov	r3, r1
 8000214:	71fb      	strb	r3, [r7, #7]
 8000216:	4613      	mov	r3, r2
 8000218:	71bb      	strb	r3, [r7, #6]
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	68ba      	ldr	r2, [r7, #8]
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	79fa      	ldrb	r2, [r7, #7]
 8000224:	711a      	strb	r2, [r3, #4]
	/*Enable clock access to GPIO*/
	if(gpioport == GPIOA){
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	4a1f      	ldr	r2, [pc, #124]	@ (80002a8 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xa4>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d105      	bne.n	800023a <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x36>
		RCC->AHB1ENR |= (1U<<0);
 800022e:	4b1f      	ldr	r3, [pc, #124]	@ (80002ac <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xa8>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000232:	4a1e      	ldr	r2, [pc, #120]	@ (80002ac <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xa8>)
 8000234:	f043 0301 	orr.w	r3, r3, #1
 8000238:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if(gpioport == GPIOC){
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	4a1c      	ldr	r2, [pc, #112]	@ (80002b0 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xac>)
 800023e:	4293      	cmp	r3, r2
 8000240:	d105      	bne.n	800024e <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x4a>
		RCC->AHB1ENR |= (1U<<2);
 8000242:	4b1a      	ldr	r3, [pc, #104]	@ (80002ac <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xa8>)
 8000244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000246:	4a19      	ldr	r2, [pc, #100]	@ (80002ac <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xa8>)
 8000248:	f043 0304 	orr.w	r3, r3, #4
 800024c:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	/*Configure the pin*/
	if(isOutput)
 800024e:	79bb      	ldrb	r3, [r7, #6]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d016      	beq.n	8000282 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x7e>
	{
		gpioport->MODER |= (1 << (gpiopin*2));
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	79fa      	ldrb	r2, [r7, #7]
 800025a:	0052      	lsls	r2, r2, #1
 800025c:	2101      	movs	r1, #1
 800025e:	fa01 f202 	lsl.w	r2, r1, r2
 8000262:	431a      	orrs	r2, r3
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	601a      	str	r2, [r3, #0]
		gpioport->MODER &=~(1 << (gpiopin*2 + 1));
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	79fa      	ldrb	r2, [r7, #7]
 800026e:	0052      	lsls	r2, r2, #1
 8000270:	3201      	adds	r2, #1
 8000272:	2101      	movs	r1, #1
 8000274:	fa01 f202 	lsl.w	r2, r1, r2
 8000278:	43d2      	mvns	r2, r2
 800027a:	401a      	ands	r2, r3
 800027c:	68bb      	ldr	r3, [r7, #8]
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	e00a      	b.n	8000298 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x94>
	}
	else
	{
		gpioport->MODER &=~(3 << (gpiopin*2));
 8000282:	68bb      	ldr	r3, [r7, #8]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	79fa      	ldrb	r2, [r7, #7]
 8000288:	0052      	lsls	r2, r2, #1
 800028a:	2103      	movs	r1, #3
 800028c:	fa01 f202 	lsl.w	r2, r1, r2
 8000290:	43d2      	mvns	r2, r2
 8000292:	401a      	ands	r2, r3
 8000294:	68bb      	ldr	r3, [r7, #8]
 8000296:	601a      	str	r2, [r3, #0]
	}
}
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	4618      	mov	r0, r3
 800029c:	3714      	adds	r7, #20
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	40020000 	.word	0x40020000
 80002ac:	40023800 	.word	0x40023800
 80002b0:	40020800 	.word	0x40020800

080002b4 <_ZN4GPIOaSEb>:

void GPIO::operator = (bool state)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	460b      	mov	r3, r1
 80002be:	70fb      	strb	r3, [r7, #3]
	if(state){
 80002c0:	78fb      	ldrb	r3, [r7, #3]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d00d      	beq.n	80002e2 <_ZN4GPIOaSEb+0x2e>
		port->ODR |= (1U << pin);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	6959      	ldr	r1, [r3, #20]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	791b      	ldrb	r3, [r3, #4]
 80002d0:	461a      	mov	r2, r3
 80002d2:	2301      	movs	r3, #1
 80002d4:	fa03 f202 	lsl.w	r2, r3, r2
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	430a      	orrs	r2, r1
 80002de:	615a      	str	r2, [r3, #20]
	}
	else{
		port->ODR &= ~(1U << pin);
	}
}
 80002e0:	e00c      	b.n	80002fc <_ZN4GPIOaSEb+0x48>
		port->ODR &= ~(1U << pin);
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	6959      	ldr	r1, [r3, #20]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	791b      	ldrb	r3, [r3, #4]
 80002ec:	461a      	mov	r2, r3
 80002ee:	2301      	movs	r3, #1
 80002f0:	4093      	lsls	r3, r2
 80002f2:	43da      	mvns	r2, r3
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	400a      	ands	r2, r1
 80002fa:	615a      	str	r2, [r3, #20]
}
 80002fc:	bf00      	nop
 80002fe:	370c      	adds	r7, #12
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr

08000308 <_ZNK4GPIOcvbEv>:
	{
		port->ODR ^= (1U << pin);
	}
}

GPIO::operator bool() const {
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	return (port->IDR & (1U << pin));
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	691a      	ldr	r2, [r3, #16]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	791b      	ldrb	r3, [r3, #4]
 800031a:	4619      	mov	r1, r3
 800031c:	2301      	movs	r3, #1
 800031e:	408b      	lsls	r3, r1
 8000320:	4013      	ands	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	bf14      	ite	ne
 8000326:	2301      	movne	r3, #1
 8000328:	2300      	moveq	r3, #0
 800032a:	b2db      	uxtb	r3, r3
}
 800032c:	4618      	mov	r0, r3
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <main>:


#include "GPIO.hpp"

int main()
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b084      	sub	sp, #16
 800033c:	af00      	add	r7, sp, #0
	//PA5 as output pin
	GPIO led(GPIOA, 5, true);
 800033e:	f107 0008 	add.w	r0, r7, #8
 8000342:	2301      	movs	r3, #1
 8000344:	2205      	movs	r2, #5
 8000346:	490d      	ldr	r1, [pc, #52]	@ (800037c <main+0x44>)
 8000348:	f7ff ff5c 	bl	8000204 <_ZN4GPIOC1EP12GPIO_TypeDefhb>
	//PC13 as input pin
	GPIO button(GPIOC, 13, false);
 800034c:	4638      	mov	r0, r7
 800034e:	2300      	movs	r3, #0
 8000350:	220d      	movs	r2, #13
 8000352:	490b      	ldr	r1, [pc, #44]	@ (8000380 <main+0x48>)
 8000354:	f7ff ff56 	bl	8000204 <_ZN4GPIOC1EP12GPIO_TypeDefhb>

	while(1)
	{
		if(!button)
 8000358:	463b      	mov	r3, r7
 800035a:	4618      	mov	r0, r3
 800035c:	f7ff ffd4 	bl	8000308 <_ZNK4GPIOcvbEv>
 8000360:	4603      	mov	r3, r0
 8000362:	f083 0301 	eor.w	r3, r3, #1
 8000366:	b2db      	uxtb	r3, r3
 8000368:	2b00      	cmp	r3, #0
 800036a:	d0f5      	beq.n	8000358 <main+0x20>
		{
			led = true;
 800036c:	f107 0308 	add.w	r3, r7, #8
 8000370:	2101      	movs	r1, #1
 8000372:	4618      	mov	r0, r3
 8000374:	f7ff ff9e 	bl	80002b4 <_ZN4GPIOaSEb>
		if(!button)
 8000378:	e7ee      	b.n	8000358 <main+0x20>
 800037a:	bf00      	nop
 800037c:	40020000 	.word	0x40020000
 8000380:	40020800 	.word	0x40020800

08000384 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000384:	480d      	ldr	r0, [pc, #52]	@ (80003bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000386:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000388:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800038c:	480c      	ldr	r0, [pc, #48]	@ (80003c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800038e:	490d      	ldr	r1, [pc, #52]	@ (80003c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000390:	4a0d      	ldr	r2, [pc, #52]	@ (80003c8 <LoopForever+0xe>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000394:	e002      	b.n	800039c <LoopCopyDataInit>

08000396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039a:	3304      	adds	r3, #4

0800039c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800039c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800039e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a0:	d3f9      	bcc.n	8000396 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a2:	4a0a      	ldr	r2, [pc, #40]	@ (80003cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a4:	4c0a      	ldr	r4, [pc, #40]	@ (80003d0 <LoopForever+0x16>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a8:	e001      	b.n	80003ae <LoopFillZerobss>

080003aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003ac:	3204      	adds	r2, #4

080003ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b0:	d3fb      	bcc.n	80003aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003b2:	f000 f811 	bl	80003d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003b6:	f7ff ffbf 	bl	8000338 <main>

080003ba <LoopForever>:

LoopForever:
  b LoopForever
 80003ba:	e7fe      	b.n	80003ba <LoopForever>
  ldr   r0, =_estack
 80003bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003c8:	08000440 	.word	0x08000440
  ldr r2, =_sbss
 80003cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d0:	2000001c 	.word	0x2000001c

080003d4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d4:	e7fe      	b.n	80003d4 <ADC_IRQHandler>
	...

080003d8 <__libc_init_array>:
 80003d8:	b570      	push	{r4, r5, r6, lr}
 80003da:	4d0d      	ldr	r5, [pc, #52]	@ (8000410 <__libc_init_array+0x38>)
 80003dc:	4c0d      	ldr	r4, [pc, #52]	@ (8000414 <__libc_init_array+0x3c>)
 80003de:	1b64      	subs	r4, r4, r5
 80003e0:	10a4      	asrs	r4, r4, #2
 80003e2:	2600      	movs	r6, #0
 80003e4:	42a6      	cmp	r6, r4
 80003e6:	d109      	bne.n	80003fc <__libc_init_array+0x24>
 80003e8:	4d0b      	ldr	r5, [pc, #44]	@ (8000418 <__libc_init_array+0x40>)
 80003ea:	4c0c      	ldr	r4, [pc, #48]	@ (800041c <__libc_init_array+0x44>)
 80003ec:	f000 f818 	bl	8000420 <_init>
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	10a4      	asrs	r4, r4, #2
 80003f4:	2600      	movs	r6, #0
 80003f6:	42a6      	cmp	r6, r4
 80003f8:	d105      	bne.n	8000406 <__libc_init_array+0x2e>
 80003fa:	bd70      	pop	{r4, r5, r6, pc}
 80003fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000400:	4798      	blx	r3
 8000402:	3601      	adds	r6, #1
 8000404:	e7ee      	b.n	80003e4 <__libc_init_array+0xc>
 8000406:	f855 3b04 	ldr.w	r3, [r5], #4
 800040a:	4798      	blx	r3
 800040c:	3601      	adds	r6, #1
 800040e:	e7f2      	b.n	80003f6 <__libc_init_array+0x1e>
 8000410:	08000438 	.word	0x08000438
 8000414:	08000438 	.word	0x08000438
 8000418:	08000438 	.word	0x08000438
 800041c:	0800043c 	.word	0x0800043c

08000420 <_init>:
 8000420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000422:	bf00      	nop
 8000424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000426:	bc08      	pop	{r3}
 8000428:	469e      	mov	lr, r3
 800042a:	4770      	bx	lr

0800042c <_fini>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr
