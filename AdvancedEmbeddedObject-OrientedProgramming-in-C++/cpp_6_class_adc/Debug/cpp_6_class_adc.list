
cpp_6_class_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006f4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080008b8  080008b8  000018b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080008c8  080008c8  000018d0  2**0
                  CONTENTS
  4 .ARM          00000000  080008c8  080008c8  000018d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008c8  080008d0  000018d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008c8  080008c8  000018c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080008cc  080008cc  000018cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000018d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080008d0  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080008d0  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000163a  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000980  00000000  00000000  00002f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000148  00000000  00000000  000038c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000dd  00000000  00000000  00003a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f49  00000000  00000000  00003ae5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ddd  00000000  00000000  0001ca2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bbef  00000000  00000000  0001e80b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aa3fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000390  00000000  00000000  000aa440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  000aa7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080008a0 	.word	0x080008a0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080008a0 	.word	0x080008a0

08000204 <_ZN10ADC_MODULEC1EP11ADC_TypeDefP12GPIO_TypeDefh>:
#define CR2_ADCON  (1U<<0)
#define CR2_CONT   (1U<<1)
#define CR2_SWSTART (1U<<30)
#define SR_EOC      (1U<<1)

ADC_MODULE::ADC_MODULE(ADC_TypeDef * adc,GPIO_TypeDef * gpioPort,uint8_t pin)
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
 8000210:	70fb      	strb	r3, [r7, #3]
	:adc(adc),gpioPort(gpioPort),pin(pin){}
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	68ba      	ldr	r2, [r7, #8]
 8000216:	601a      	str	r2, [r3, #0]
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	687a      	ldr	r2, [r7, #4]
 800021c:	605a      	str	r2, [r3, #4]
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	78fa      	ldrb	r2, [r7, #3]
 8000222:	721a      	strb	r2, [r3, #8]
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	4618      	mov	r0, r3
 8000228:	3714      	adds	r7, #20
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
	...

08000234 <_ZN10ADC_MODULE4initEv>:


void ADC_MODULE::init()
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	/****Configure the adc gpio pin****/
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 800023c:	4b1c      	ldr	r3, [pc, #112]	@ (80002b0 <_ZN10ADC_MODULE4initEv+0x7c>)
 800023e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000240:	4a1b      	ldr	r2, [pc, #108]	@ (80002b0 <_ZN10ADC_MODULE4initEv+0x7c>)
 8000242:	f043 0301 	orr.w	r3, r3, #1
 8000246:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA1 mode to analog mode*/
	GPIOA->MODER |= (1U<<(2*pin));
 8000248:	4b1a      	ldr	r3, [pc, #104]	@ (80002b4 <_ZN10ADC_MODULE4initEv+0x80>)
 800024a:	681a      	ldr	r2, [r3, #0]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	7a1b      	ldrb	r3, [r3, #8]
 8000250:	005b      	lsls	r3, r3, #1
 8000252:	2101      	movs	r1, #1
 8000254:	fa01 f303 	lsl.w	r3, r1, r3
 8000258:	4916      	ldr	r1, [pc, #88]	@ (80002b4 <_ZN10ADC_MODULE4initEv+0x80>)
 800025a:	4313      	orrs	r3, r2
 800025c:	600b      	str	r3, [r1, #0]
	GPIOA->MODER |= (1U<<(2*pin+1));
 800025e:	4b15      	ldr	r3, [pc, #84]	@ (80002b4 <_ZN10ADC_MODULE4initEv+0x80>)
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	7a1b      	ldrb	r3, [r3, #8]
 8000266:	005b      	lsls	r3, r3, #1
 8000268:	3301      	adds	r3, #1
 800026a:	2101      	movs	r1, #1
 800026c:	fa01 f303 	lsl.w	r3, r1, r3
 8000270:	4910      	ldr	r1, [pc, #64]	@ (80002b4 <_ZN10ADC_MODULE4initEv+0x80>)
 8000272:	4313      	orrs	r3, r2
 8000274:	600b      	str	r3, [r1, #0]

	/****Configure the adc module****/
	/*Enable clock access to the adc module*/
	RCC->APB2ENR |= ADC1EN;
 8000276:	4b0e      	ldr	r3, [pc, #56]	@ (80002b0 <_ZN10ADC_MODULE4initEv+0x7c>)
 8000278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800027a:	4a0d      	ldr	r2, [pc, #52]	@ (80002b0 <_ZN10ADC_MODULE4initEv+0x7c>)
 800027c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000280:	6453      	str	r3, [r2, #68]	@ 0x44

	/*Set conversion sequence start*/
	adc->SQR3 = ADC_CH1;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	2201      	movs	r2, #1
 8000288:	635a      	str	r2, [r3, #52]	@ 0x34

	/*Set conversion sequence length*/
	adc->SQR1 = ADC_SEQ_LEN_1;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	2200      	movs	r2, #0
 8000290:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*Enable adc module*/
	adc->CR2 |= CR2_ADCON;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	689a      	ldr	r2, [r3, #8]
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f042 0201 	orr.w	r2, r2, #1
 80002a0:	609a      	str	r2, [r3, #8]
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40023800 	.word	0x40023800
 80002b4:	40020000 	.word	0x40020000

080002b8 <_ZN10ADC_MODULE15startConversionEv>:

void ADC_MODULE::startConversion()
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	/*Enable continuous conversion*/
	adc->CR2 |= CR2_CONT;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	689a      	ldr	r2, [r3, #8]
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f042 0202 	orr.w	r2, r2, #2
 80002ce:	609a      	str	r2, [r3, #8]

	/*Start ADC conversion*/
	adc->CR2 |= CR2_SWSTART;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	689a      	ldr	r2, [r3, #8]
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80002de:	609a      	str	r2, [r3, #8]
}
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr

080002ec <_ZN10ADC_MODULE4readEv>:

uint32_t ADC_MODULE::read()
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
	/*wait for conversion to be complete*/
	while(!(adc->SR & SR_EOC));
 80002f4:	bf00      	nop
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 0302 	and.w	r3, r3, #2
 8000300:	2b00      	cmp	r3, #0
 8000302:	bf0c      	ite	eq
 8000304:	2301      	moveq	r3, #1
 8000306:	2300      	movne	r3, #0
 8000308:	b2db      	uxtb	r3, r3
 800030a:	2b00      	cmp	r3, #0
 800030c:	d1f3      	bne.n	80002f6 <_ZN10ADC_MODULE4readEv+0xa>

	/*Read converted value*/
	return (adc->DR);
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000314:	4618      	mov	r0, r3
 8000316:	370c      	adds	r7, #12
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr

08000320 <_ZN6FPU_cp6enableEv>:


#include "FPU.hpp"

void FPU_cp::enable(void)
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
	/*Enable floating point unit: enable CP10 and CP11 full access*/
	SCB->CPACR |= (1<<20);
 8000328:	4b12      	ldr	r3, [pc, #72]	@ (8000374 <_ZN6FPU_cp6enableEv+0x54>)
 800032a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800032e:	4a11      	ldr	r2, [pc, #68]	@ (8000374 <_ZN6FPU_cp6enableEv+0x54>)
 8000330:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000334:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1<<21);
 8000338:	4b0e      	ldr	r3, [pc, #56]	@ (8000374 <_ZN6FPU_cp6enableEv+0x54>)
 800033a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800033e:	4a0d      	ldr	r2, [pc, #52]	@ (8000374 <_ZN6FPU_cp6enableEv+0x54>)
 8000340:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000344:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1<<22);
 8000348:	4b0a      	ldr	r3, [pc, #40]	@ (8000374 <_ZN6FPU_cp6enableEv+0x54>)
 800034a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800034e:	4a09      	ldr	r2, [pc, #36]	@ (8000374 <_ZN6FPU_cp6enableEv+0x54>)
 8000350:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000354:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	SCB->CPACR |= (1<<23);
 8000358:	4b06      	ldr	r3, [pc, #24]	@ (8000374 <_ZN6FPU_cp6enableEv+0x54>)
 800035a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800035e:	4a05      	ldr	r2, [pc, #20]	@ (8000374 <_ZN6FPU_cp6enableEv+0x54>)
 8000360:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000364:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr
 8000374:	e000ed00 	.word	0xe000ed00

08000378 <_ZN4GPIOC1EP12GPIO_TypeDefhb>:


#include "GPIO.hpp"

//Constructor
GPIO::GPIO(GPIO_TypeDef *gpioport, uint8_t gpiopin, bool isOutput): port(gpioport), pin(gpiopin){
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	60f8      	str	r0, [r7, #12]
 8000380:	60b9      	str	r1, [r7, #8]
 8000382:	4611      	mov	r1, r2
 8000384:	461a      	mov	r2, r3
 8000386:	460b      	mov	r3, r1
 8000388:	71fb      	strb	r3, [r7, #7]
 800038a:	4613      	mov	r3, r2
 800038c:	71bb      	strb	r3, [r7, #6]
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	68ba      	ldr	r2, [r7, #8]
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	79fa      	ldrb	r2, [r7, #7]
 8000398:	711a      	strb	r2, [r3, #4]
	/*Enable clock access to GPIO*/
	if(gpioport == GPIOA){
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	4a1f      	ldr	r2, [pc, #124]	@ (800041c <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xa4>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d105      	bne.n	80003ae <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x36>
		RCC->AHB1ENR |= (1U<<0);
 80003a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000420 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xa8>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a6:	4a1e      	ldr	r2, [pc, #120]	@ (8000420 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xa8>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6313      	str	r3, [r2, #48]	@ 0x30
	}
	if(gpioport == GPIOC){
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	4a1c      	ldr	r2, [pc, #112]	@ (8000424 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xac>)
 80003b2:	4293      	cmp	r3, r2
 80003b4:	d105      	bne.n	80003c2 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x4a>
		RCC->AHB1ENR |= (1U<<2);
 80003b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000420 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xa8>)
 80003b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ba:	4a19      	ldr	r2, [pc, #100]	@ (8000420 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0xa8>)
 80003bc:	f043 0304 	orr.w	r3, r3, #4
 80003c0:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	/*Configure the pin*/
	if(isOutput)
 80003c2:	79bb      	ldrb	r3, [r7, #6]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d016      	beq.n	80003f6 <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x7e>
	{
		gpioport->MODER |= (1 << (gpiopin*2));
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	79fa      	ldrb	r2, [r7, #7]
 80003ce:	0052      	lsls	r2, r2, #1
 80003d0:	2101      	movs	r1, #1
 80003d2:	fa01 f202 	lsl.w	r2, r1, r2
 80003d6:	431a      	orrs	r2, r3
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	601a      	str	r2, [r3, #0]
		gpioport->MODER &=~(1 << (gpiopin*2 + 1));
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	79fa      	ldrb	r2, [r7, #7]
 80003e2:	0052      	lsls	r2, r2, #1
 80003e4:	3201      	adds	r2, #1
 80003e6:	2101      	movs	r1, #1
 80003e8:	fa01 f202 	lsl.w	r2, r1, r2
 80003ec:	43d2      	mvns	r2, r2
 80003ee:	401a      	ands	r2, r3
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	e00a      	b.n	800040c <_ZN4GPIOC1EP12GPIO_TypeDefhb+0x94>
	}
	else
	{
		gpioport->MODER &=~(3 << (gpiopin*2));
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	79fa      	ldrb	r2, [r7, #7]
 80003fc:	0052      	lsls	r2, r2, #1
 80003fe:	2103      	movs	r1, #3
 8000400:	fa01 f202 	lsl.w	r2, r1, r2
 8000404:	43d2      	mvns	r2, r2
 8000406:	401a      	ands	r2, r3
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	601a      	str	r2, [r3, #0]
	}
}
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	4618      	mov	r0, r3
 8000410:	3714      	adds	r7, #20
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	40020000 	.word	0x40020000
 8000420:	40023800 	.word	0x40023800
 8000424:	40020800 	.word	0x40020800

08000428 <_ZN4GPIO6toggleEv>:

//Toggle pin state
void GPIO::toggle(){
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	port->ODR ^= (1U<<pin);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	6959      	ldr	r1, [r3, #20]
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	791b      	ldrb	r3, [r3, #4]
 800043a:	461a      	mov	r2, r3
 800043c:	2301      	movs	r3, #1
 800043e:	fa03 f202 	lsl.w	r2, r3, r2
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	404a      	eors	r2, r1
 8000448:	615a      	str	r2, [r3, #20]
}
 800044a:	bf00      	nop
 800044c:	370c      	adds	r7, #12
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr

08000456 <_ZN4GPIO4readEv>:
void GPIO::setHigh(){
	port->ODR |= (1U<<pin);
}

//read pin
bool GPIO::read(){
 8000456:	b480      	push	{r7}
 8000458:	b083      	sub	sp, #12
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
	return (port->IDR & (1U<<pin));
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	691a      	ldr	r2, [r3, #16]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	791b      	ldrb	r3, [r3, #4]
 8000468:	4619      	mov	r1, r3
 800046a:	2301      	movs	r3, #1
 800046c:	408b      	lsls	r3, r1
 800046e:	4013      	ands	r3, r2
 8000470:	2b00      	cmp	r3, #0
 8000472:	bf14      	ite	ne
 8000474:	2301      	movne	r3, #1
 8000476:	2300      	moveq	r3, #0
 8000478:	b2db      	uxtb	r3, r3
}
 800047a:	4618      	mov	r0, r3
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
	...

08000488 <_ZN8Timebase4initEv>:


volatile uint32_t Timebase::tickcount = 0;

void Timebase::init(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800048c:	b672      	cpsid	i
}
 800048e:	bf00      	nop
	/*Disable global interrupt*/
	__disable_irq();

	/*Load the timer with number of clock cycles per second*/
	SysTick->LOAD = ONE_SEC_LOAD -1;
 8000490:	4b0d      	ldr	r3, [pc, #52]	@ (80004c8 <_ZN8Timebase4initEv+0x40>)
 8000492:	4a0e      	ldr	r2, [pc, #56]	@ (80004cc <_ZN8Timebase4initEv+0x44>)
 8000494:	605a      	str	r2, [r3, #4]

	/*clear systick current reguster*/
	SysTick->VAL = 0;
 8000496:	4b0c      	ldr	r3, [pc, #48]	@ (80004c8 <_ZN8Timebase4initEv+0x40>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]

	/*select internal clock source*/
	SysTick->CTRL = CTRL_CLKSRC;
 800049c:	4b0a      	ldr	r3, [pc, #40]	@ (80004c8 <_ZN8Timebase4initEv+0x40>)
 800049e:	2204      	movs	r2, #4
 80004a0:	601a      	str	r2, [r3, #0]

	/*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 80004a2:	4b09      	ldr	r3, [pc, #36]	@ (80004c8 <_ZN8Timebase4initEv+0x40>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a08      	ldr	r2, [pc, #32]	@ (80004c8 <_ZN8Timebase4initEv+0x40>)
 80004a8:	f043 0302 	orr.w	r3, r3, #2
 80004ac:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |= CTRL_ENABLE;
 80004ae:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <_ZN8Timebase4initEv+0x40>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a05      	ldr	r2, [pc, #20]	@ (80004c8 <_ZN8Timebase4initEv+0x40>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80004ba:	b662      	cpsie	i
}
 80004bc:	bf00      	nop

	/*Enable global interrupt*/
	__enable_irq();
}
 80004be:	bf00      	nop
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	e000e010 	.word	0xe000e010
 80004cc:	00f423ff 	.word	0x00f423ff

080004d0 <_ZN8Timebase13tickIncrementEv>:
	__enable_irq();

	return currentTick;
}
void Timebase::tickIncrement(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
	tickcount += TICK_FREQ;
 80004d4:	4b04      	ldr	r3, [pc, #16]	@ (80004e8 <_ZN8Timebase13tickIncrementEv+0x18>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	3301      	adds	r3, #1
 80004da:	4a03      	ldr	r2, [pc, #12]	@ (80004e8 <_ZN8Timebase13tickIncrementEv+0x18>)
 80004dc:	6013      	str	r3, [r2, #0]
}
 80004de:	bf00      	nop
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	2000001c 	.word	0x2000001c

080004ec <SysTick_Handler>:



extern "C" void SysTick_Handler(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	Timebase::tickIncrement();
 80004f0:	f7ff ffee 	bl	80004d0 <_ZN8Timebase13tickIncrementEv>
}
 80004f4:	bf00      	nop
 80004f6:	bd80      	pop	{r7, pc}

080004f8 <_ZN4UART11setBaudRateEm>:

private:
	USART_TypeDef *uart;
	uint32_t baudrate;

	void setBaudRate(uint32_t periph_clk)
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 8000500:	6039      	str	r1, [r7, #0]
	{
		uart->BRR = ((periph_clk + (baudrate/2U))/baudrate);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	085a      	lsrs	r2, r3, #1
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	18d1      	adds	r1, r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	685a      	ldr	r2, [r3, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	fbb1 f2f2 	udiv	r2, r1, r2
 8000518:	609a      	str	r2, [r3, #8]
	}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
	...

08000528 <_ZN4UARTC1EP13USART_TypeDefm>:

public:
	UART(USART_TypeDef *uart, uint32_t baudrate): uart(uart),baudrate(baudrate){
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	68ba      	ldr	r2, [r7, #8]
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	605a      	str	r2, [r3, #4]

		/*Enable clock access to GPIOA*/
		RCC->AHB1ENR |= (1U<<0);
 8000540:	4b20      	ldr	r3, [pc, #128]	@ (80005c4 <_ZN4UARTC1EP13USART_TypeDefm+0x9c>)
 8000542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000544:	4a1f      	ldr	r2, [pc, #124]	@ (80005c4 <_ZN4UARTC1EP13USART_TypeDefm+0x9c>)
 8000546:	f043 0301 	orr.w	r3, r3, #1
 800054a:	6313      	str	r3, [r2, #48]	@ 0x30

		/*set the mode of PA2 to alternate function mode*/
		GPIOA->MODER &=~(1U<<4);
 800054c:	4b1e      	ldr	r3, [pc, #120]	@ (80005c8 <_ZN4UARTC1EP13USART_TypeDefm+0xa0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a1d      	ldr	r2, [pc, #116]	@ (80005c8 <_ZN4UARTC1EP13USART_TypeDefm+0xa0>)
 8000552:	f023 0310 	bic.w	r3, r3, #16
 8000556:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= (1U<<5);
 8000558:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <_ZN4UARTC1EP13USART_TypeDefm+0xa0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a1a      	ldr	r2, [pc, #104]	@ (80005c8 <_ZN4UARTC1EP13USART_TypeDefm+0xa0>)
 800055e:	f043 0320 	orr.w	r3, r3, #32
 8000562:	6013      	str	r3, [r2, #0]

		/*set alternate function type tp AF7(UART2_TX)*/
		GPIOA->AFR[0] |= (1U<<8);
 8000564:	4b18      	ldr	r3, [pc, #96]	@ (80005c8 <_ZN4UARTC1EP13USART_TypeDefm+0xa0>)
 8000566:	6a1b      	ldr	r3, [r3, #32]
 8000568:	4a17      	ldr	r2, [pc, #92]	@ (80005c8 <_ZN4UARTC1EP13USART_TypeDefm+0xa0>)
 800056a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800056e:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<9);
 8000570:	4b15      	ldr	r3, [pc, #84]	@ (80005c8 <_ZN4UARTC1EP13USART_TypeDefm+0xa0>)
 8000572:	6a1b      	ldr	r3, [r3, #32]
 8000574:	4a14      	ldr	r2, [pc, #80]	@ (80005c8 <_ZN4UARTC1EP13USART_TypeDefm+0xa0>)
 8000576:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800057a:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] |= (1U<<10);
 800057c:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <_ZN4UARTC1EP13USART_TypeDefm+0xa0>)
 800057e:	6a1b      	ldr	r3, [r3, #32]
 8000580:	4a11      	ldr	r2, [pc, #68]	@ (80005c8 <_ZN4UARTC1EP13USART_TypeDefm+0xa0>)
 8000582:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000586:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &=~(1U<<11);
 8000588:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <_ZN4UARTC1EP13USART_TypeDefm+0xa0>)
 800058a:	6a1b      	ldr	r3, [r3, #32]
 800058c:	4a0e      	ldr	r2, [pc, #56]	@ (80005c8 <_ZN4UARTC1EP13USART_TypeDefm+0xa0>)
 800058e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000592:	6213      	str	r3, [r2, #32]

		/*Enable clock access to uart2*/
		RCC->APB1ENR |= (1U<<17);
 8000594:	4b0b      	ldr	r3, [pc, #44]	@ (80005c4 <_ZN4UARTC1EP13USART_TypeDefm+0x9c>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	4a0a      	ldr	r2, [pc, #40]	@ (80005c4 <_ZN4UARTC1EP13USART_TypeDefm+0x9c>)
 800059a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800059e:	6413      	str	r3, [r2, #64]	@ 0x40

		setBaudRate(16000000);
 80005a0:	490a      	ldr	r1, [pc, #40]	@ (80005cc <_ZN4UARTC1EP13USART_TypeDefm+0xa4>)
 80005a2:	68f8      	ldr	r0, [r7, #12]
 80005a4:	f7ff ffa8 	bl	80004f8 <_ZN4UART11setBaudRateEm>

		/*configure transfer direction*/
		USART2->CR1 = (1U<<3);
 80005a8:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <_ZN4UARTC1EP13USART_TypeDefm+0xa8>)
 80005aa:	2208      	movs	r2, #8
 80005ac:	60da      	str	r2, [r3, #12]

		/*Enable uart module*/
		USART2->CR1 |= (1U<<13);
 80005ae:	4b08      	ldr	r3, [pc, #32]	@ (80005d0 <_ZN4UARTC1EP13USART_TypeDefm+0xa8>)
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	4a07      	ldr	r2, [pc, #28]	@ (80005d0 <_ZN4UARTC1EP13USART_TypeDefm+0xa8>)
 80005b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005b8:	60d3      	str	r3, [r2, #12]
	}
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	4618      	mov	r0, r3
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40020000 	.word	0x40020000
 80005cc:	00f42400 	.word	0x00f42400
 80005d0:	40004400 	.word	0x40004400

080005d4 <_ZN4UART4sendEc>:

	void send(char ch)
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	460b      	mov	r3, r1
 80005de:	70fb      	strb	r3, [r7, #3]
	{
		/*Make sure transmit data register is empty*/
		while(!(USART2->SR & (1U<<7)));
 80005e0:	bf00      	nop
 80005e2:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <_ZN4UART4sendEc+0x38>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	bf0c      	ite	eq
 80005ee:	2301      	moveq	r3, #1
 80005f0:	2300      	movne	r3, #0
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d1f4      	bne.n	80005e2 <_ZN4UART4sendEc+0xe>

		/*write to transmit data register*/
		USART2->DR = (ch & 0xFF);
 80005f8:	4a04      	ldr	r2, [pc, #16]	@ (800060c <_ZN4UART4sendEc+0x38>)
 80005fa:	78fb      	ldrb	r3, [r7, #3]
 80005fc:	6053      	str	r3, [r2, #4]
	}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40004400 	.word	0x40004400

08000610 <_ZN4UART10sendStringEPKc>:

	void sendString(const char *str)
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
	{
		while(*str){
 800061a:	e007      	b.n	800062c <_ZN4UART10sendStringEPKc+0x1c>
			send(*str++);
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	603a      	str	r2, [r7, #0]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f7ff ffd4 	bl	80005d4 <_ZN4UART4sendEc>
		while(*str){
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d1f3      	bne.n	800061c <_ZN4UART10sendStringEPKc+0xc>
		}
	}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <_ZN4UART11sendIntegerEi>:

	void sendInteger(int num) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	@ 0x28
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
		char buffer[12];
		int i = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	627b      	str	r3, [r7, #36]	@ 0x24
		bool isNegative = false;
 800064e:	2300      	movs	r3, #0
 8000650:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		if(num < 0) {
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	da05      	bge.n	8000666 <_ZN4UART11sendIntegerEi+0x26>
			isNegative = true;
 800065a:	2301      	movs	r3, #1
 800065c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			num = -num;
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	425b      	negs	r3, r3
 8000664:	603b      	str	r3, [r7, #0]
		}

		do {
			buffer[i++] = (num % 10) + '0';
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	4b33      	ldr	r3, [pc, #204]	@ (8000738 <_ZN4UART11sendIntegerEi+0xf8>)
 800066a:	fb83 1302 	smull	r1, r3, r3, r2
 800066e:	1099      	asrs	r1, r3, #2
 8000670:	17d3      	asrs	r3, r2, #31
 8000672:	1ac9      	subs	r1, r1, r3
 8000674:	460b      	mov	r3, r1
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	440b      	add	r3, r1
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	1ad1      	subs	r1, r2, r3
 800067e:	b2ca      	uxtb	r2, r1
 8000680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000682:	1c59      	adds	r1, r3, #1
 8000684:	6279      	str	r1, [r7, #36]	@ 0x24
 8000686:	3230      	adds	r2, #48	@ 0x30
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	3328      	adds	r3, #40	@ 0x28
 800068c:	443b      	add	r3, r7
 800068e:	f803 2c1c 	strb.w	r2, [r3, #-28]
			num /= 10;
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	4a28      	ldr	r2, [pc, #160]	@ (8000738 <_ZN4UART11sendIntegerEi+0xf8>)
 8000696:	fb82 1203 	smull	r1, r2, r2, r3
 800069a:	1092      	asrs	r2, r2, #2
 800069c:	17db      	asrs	r3, r3, #31
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	603b      	str	r3, [r7, #0]
		}while(num > 0);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	dcde      	bgt.n	8000666 <_ZN4UART11sendIntegerEi+0x26>

		if(isNegative){
 80006a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d007      	beq.n	80006c0 <_ZN4UART11sendIntegerEi+0x80>
			buffer[i++] = '-';
 80006b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006b2:	1c5a      	adds	r2, r3, #1
 80006b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80006b6:	3328      	adds	r3, #40	@ 0x28
 80006b8:	443b      	add	r3, r7
 80006ba:	222d      	movs	r2, #45	@ 0x2d
 80006bc:	f803 2c1c 	strb.w	r2, [r3, #-28]
		}
		buffer[i] = '\0';
 80006c0:	f107 020c 	add.w	r2, r7, #12
 80006c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006c6:	4413      	add	r3, r2
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]

		// Reverse string
		for(int j=0; j<i/2; ++j){
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
 80006d0:	e01f      	b.n	8000712 <_ZN4UART11sendIntegerEi+0xd2>
			char temp = buffer[j];
 80006d2:	f107 020c 	add.w	r2, r7, #12
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	4413      	add	r3, r2
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	76fb      	strb	r3, [r7, #27]
			buffer[j] = buffer[i - 1 - j];
 80006de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e0:	1e5a      	subs	r2, r3, #1
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	3328      	adds	r3, #40	@ 0x28
 80006e8:	443b      	add	r3, r7
 80006ea:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80006ee:	f107 020c 	add.w	r2, r7, #12
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	4413      	add	r3, r2
 80006f6:	460a      	mov	r2, r1
 80006f8:	701a      	strb	r2, [r3, #0]
			buffer[i - 1 - j] = temp;
 80006fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006fc:	1e5a      	subs	r2, r3, #1
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	1ad3      	subs	r3, r2, r3
 8000702:	3328      	adds	r3, #40	@ 0x28
 8000704:	443b      	add	r3, r7
 8000706:	7efa      	ldrb	r2, [r7, #27]
 8000708:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(int j=0; j<i/2; ++j){
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	3301      	adds	r3, #1
 8000710:	61fb      	str	r3, [r7, #28]
 8000712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000714:	0fda      	lsrs	r2, r3, #31
 8000716:	4413      	add	r3, r2
 8000718:	105b      	asrs	r3, r3, #1
 800071a:	461a      	mov	r2, r3
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	4293      	cmp	r3, r2
 8000720:	dbd7      	blt.n	80006d2 <_ZN4UART11sendIntegerEi+0x92>
		}

		sendString(buffer);
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	4619      	mov	r1, r3
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f7ff ff71 	bl	8000610 <_ZN4UART10sendStringEPKc>
	}
 800072e:	bf00      	nop
 8000730:	3728      	adds	r7, #40	@ 0x28
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	66666667 	.word	0x66666667

0800073c <main>:
#include "Timebase.hpp"
#include "ADC.hpp"


int main()
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	@ 0x28
 8000740:	af00      	add	r7, sp, #0
	//Enable FPU
	FPU_cp fpu;
	fpu.enable();
 8000742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fdea 	bl	8000320 <_ZN6FPU_cp6enableEv>

	//Initialize systick
	Timebase::init();
 800074c:	f7ff fe9c 	bl	8000488 <_ZN8Timebase4initEv>

	//create an adc object for PA1 using ADC1
	ADC_MODULE adc1(ADC1, GPIOA,1);
 8000750:	f107 0018 	add.w	r0, r7, #24
 8000754:	2301      	movs	r3, #1
 8000756:	4a25      	ldr	r2, [pc, #148]	@ (80007ec <main+0xb0>)
 8000758:	4925      	ldr	r1, [pc, #148]	@ (80007f0 <main+0xb4>)
 800075a:	f7ff fd53 	bl	8000204 <_ZN10ADC_MODULEC1EP11ADC_TypeDefP12GPIO_TypeDefh>

	//PA5 as output pin
	GPIO led(GPIOA, 5, true);
 800075e:	f107 0010 	add.w	r0, r7, #16
 8000762:	2301      	movs	r3, #1
 8000764:	2205      	movs	r2, #5
 8000766:	4921      	ldr	r1, [pc, #132]	@ (80007ec <main+0xb0>)
 8000768:	f7ff fe06 	bl	8000378 <_ZN4GPIOC1EP12GPIO_TypeDefhb>
	//PC13 as input pin
	GPIO button(GPIOC, 13, false);
 800076c:	f107 0008 	add.w	r0, r7, #8
 8000770:	2300      	movs	r3, #0
 8000772:	220d      	movs	r2, #13
 8000774:	491f      	ldr	r1, [pc, #124]	@ (80007f4 <main+0xb8>)
 8000776:	f7ff fdff 	bl	8000378 <_ZN4GPIOC1EP12GPIO_TypeDefhb>

	UART uart(USART2, 115200);
 800077a:	463b      	mov	r3, r7
 800077c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000780:	491d      	ldr	r1, [pc, #116]	@ (80007f8 <main+0xbc>)
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fed0 	bl	8000528 <_ZN4UARTC1EP13USART_TypeDefm>

	//Initialize ADC
	adc1.init();
 8000788:	f107 0318 	add.w	r3, r7, #24
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fd51 	bl	8000234 <_ZN10ADC_MODULE4initEv>

	//Start ADC Conversion
	adc1.startConversion();
 8000792:	f107 0318 	add.w	r3, r7, #24
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fd8e 	bl	80002b8 <_ZN10ADC_MODULE15startConversionEv>

	while(1)
	{
		if(!button.read())
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	4618      	mov	r0, r3
 80007a2:	f7ff fe58 	bl	8000456 <_ZN4GPIO4readEv>
 80007a6:	4603      	mov	r3, r0
 80007a8:	f083 0301 	eor.w	r3, r3, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d004      	beq.n	80007bc <main+0x80>
		{
			led.toggle();
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fe36 	bl	8000428 <_ZN4GPIO6toggleEv>
		}

		uart.sendString("ADC Value: ");
 80007bc:	463b      	mov	r3, r7
 80007be:	490f      	ldr	r1, [pc, #60]	@ (80007fc <main+0xc0>)
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff ff25 	bl	8000610 <_ZN4UART10sendStringEPKc>
		uart.sendInteger(adc1.read());
 80007c6:	f107 0318 	add.w	r3, r7, #24
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff fd8e 	bl	80002ec <_ZN10ADC_MODULE4readEv>
 80007d0:	4603      	mov	r3, r0
 80007d2:	461a      	mov	r2, r3
 80007d4:	463b      	mov	r3, r7
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff31 	bl	8000640 <_ZN4UART11sendIntegerEi>
		uart.sendString("\r\n ");
 80007de:	463b      	mov	r3, r7
 80007e0:	4907      	ldr	r1, [pc, #28]	@ (8000800 <main+0xc4>)
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ff14 	bl	8000610 <_ZN4UART10sendStringEPKc>
		if(!button.read())
 80007e8:	e7d8      	b.n	800079c <main+0x60>
 80007ea:	bf00      	nop
 80007ec:	40020000 	.word	0x40020000
 80007f0:	40012000 	.word	0x40012000
 80007f4:	40020800 	.word	0x40020800
 80007f8:	40004400 	.word	0x40004400
 80007fc:	080008b8 	.word	0x080008b8
 8000800:	080008c4 	.word	0x080008c4

08000804 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000804:	480d      	ldr	r0, [pc, #52]	@ (800083c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000806:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000808:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800080c:	480c      	ldr	r0, [pc, #48]	@ (8000840 <LoopForever+0x6>)
  ldr r1, =_edata
 800080e:	490d      	ldr	r1, [pc, #52]	@ (8000844 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000810:	4a0d      	ldr	r2, [pc, #52]	@ (8000848 <LoopForever+0xe>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000814:	e002      	b.n	800081c <LoopCopyDataInit>

08000816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800081a:	3304      	adds	r3, #4

0800081c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800081c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000820:	d3f9      	bcc.n	8000816 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000822:	4a0a      	ldr	r2, [pc, #40]	@ (800084c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000824:	4c0a      	ldr	r4, [pc, #40]	@ (8000850 <LoopForever+0x16>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000828:	e001      	b.n	800082e <LoopFillZerobss>

0800082a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800082a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800082c:	3204      	adds	r2, #4

0800082e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000830:	d3fb      	bcc.n	800082a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000832:	f000 f811 	bl	8000858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000836:	f7ff ff81 	bl	800073c <main>

0800083a <LoopForever>:

LoopForever:
  b LoopForever
 800083a:	e7fe      	b.n	800083a <LoopForever>
  ldr   r0, =_estack
 800083c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000844:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000848:	080008d0 	.word	0x080008d0
  ldr r2, =_sbss
 800084c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000850:	20000020 	.word	0x20000020

08000854 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000854:	e7fe      	b.n	8000854 <ADC_IRQHandler>
	...

08000858 <__libc_init_array>:
 8000858:	b570      	push	{r4, r5, r6, lr}
 800085a:	4d0d      	ldr	r5, [pc, #52]	@ (8000890 <__libc_init_array+0x38>)
 800085c:	4c0d      	ldr	r4, [pc, #52]	@ (8000894 <__libc_init_array+0x3c>)
 800085e:	1b64      	subs	r4, r4, r5
 8000860:	10a4      	asrs	r4, r4, #2
 8000862:	2600      	movs	r6, #0
 8000864:	42a6      	cmp	r6, r4
 8000866:	d109      	bne.n	800087c <__libc_init_array+0x24>
 8000868:	4d0b      	ldr	r5, [pc, #44]	@ (8000898 <__libc_init_array+0x40>)
 800086a:	4c0c      	ldr	r4, [pc, #48]	@ (800089c <__libc_init_array+0x44>)
 800086c:	f000 f818 	bl	80008a0 <_init>
 8000870:	1b64      	subs	r4, r4, r5
 8000872:	10a4      	asrs	r4, r4, #2
 8000874:	2600      	movs	r6, #0
 8000876:	42a6      	cmp	r6, r4
 8000878:	d105      	bne.n	8000886 <__libc_init_array+0x2e>
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000880:	4798      	blx	r3
 8000882:	3601      	adds	r6, #1
 8000884:	e7ee      	b.n	8000864 <__libc_init_array+0xc>
 8000886:	f855 3b04 	ldr.w	r3, [r5], #4
 800088a:	4798      	blx	r3
 800088c:	3601      	adds	r6, #1
 800088e:	e7f2      	b.n	8000876 <__libc_init_array+0x1e>
 8000890:	080008c8 	.word	0x080008c8
 8000894:	080008c8 	.word	0x080008c8
 8000898:	080008c8 	.word	0x080008c8
 800089c:	080008cc 	.word	0x080008cc

080008a0 <_init>:
 80008a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008a2:	bf00      	nop
 80008a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008a6:	bc08      	pop	{r3}
 80008a8:	469e      	mov	lr, r3
 80008aa:	4770      	bx	lr

080008ac <_fini>:
 80008ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ae:	bf00      	nop
 80008b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008b2:	bc08      	pop	{r3}
 80008b4:	469e      	mov	lr, r3
 80008b6:	4770      	bx	lr
